{
    "number": 166082,
    "data": "8,8,8,8,12,12,12,12,16,16,18,18,20,20,20,20,24,24,27,27,28,28,30,30,32,32,36,36,36,36,36,36,40,40,45,45,48,48,48,48,48,48,54,54,54,54,60,60,64,64,64,64,64,64,64,64,72,72,75,75,80,80,80,80,80,80,84,84,84,84,90",
    "name": "Maximal volume of a closed box created by using at most n voxels as the boundary.",
    "comment": [
        "For example, a 3x3x3 box can be created by using top and bottom plates of 3x3x1 voxels, and using 8 voxels to connect them, totaling 26 voxels."
    ],
    "formula": [
        "For a given value of N (at least 8), calculate the max Volume(N)=w*h*d such that (N <= (w*h*d - (w-1)*(h-1)*(d-1)). The minimum box is 2x2x2 voxels to prevent overlapping voxels (multiple voxels occupying the same location in space) or degenerate cases."
    ],
    "program": [
        "(Java) // input: int voxels int max = 0;",
        "for (int depth = voxels / 4; depth >= 2; depth--)",
        "{",
        "    for (int width = voxels / (2 * depth); width >= 2; width--)",
        "    {",
        "        int remaining = voxels - 2 * width * depth;",
        "        int height = 2 + remaining / (2 * ((width - 1) + (depth - 1)));",
        "        int volume = width * depth * height;",
        "        if (max < volume)",
        "        {",
        "            max = volume;",
        "        }",
        "    }",
        "}"
    ],
    "xref": [
        "Cf. A166083 (Sequence with only the Volume(N)>Volume(N-1) condition), A166084 (Sequence where the enclosed empty space must increase)"
    ],
    "keyword": "base,nonn",
    "offset": "8,1",
    "author": "Mark Jeronimus (mark.jeronimus(AT)gmail.com), Oct 06 2009, Dec 01 2009",
    "ext": [
        "Minor edits by _N. J. A. Sloane_, Dec 05 2009"
    ],
    "references": 2,
    "revision": 5,
    "time": "2014-11-10T09:39:58-05:00",
    "created": "2010-06-01T03:00:00-04:00"
}