{
    "number": 180437,
    "data": "0,0,0,6,24,78,186,372,876,1632,3024,5310,8496,13344,21186,31878,46752,66936,94800,130194",
    "name": "a(n) counts the distinct cubical (on alphabet of 3 symbols) billiard words with length n, acting as prefix to just k = 1 such words of length n+1 (that is, not \"special\").",
    "comment": [
        "By symmetry under reversal, a(n) also counts length n cubical billiard words acting as suffix to just k length n+1 cubical billiard words. The attached program counts k-special words for k = 1,...,m, where m = 3 denotes the size of the alphabet. Computation: _Fred Lunnon_ for 0 <= n <= 19 (MAGMA)."
    ],
    "program": [
        "(MAGMA) // langs[n][i] holds the i-th word of length n, encoded as a decimal number, // and excluding permutations; // as generated by program under A180239, using maxsym := 3 (instead of 4). bas := 10; // base = 10 or max(m+1) (global preset constant) // Reduce words in langs[n+2] mod 10, convert to multiset; // special[k][n] := number occurring k times. Increment by perms! m := 3; maxlen := 20; baspow := [10^(j-1) : j in [0+1..maxlen+1]]; special := [[0 : j in [0+1..maxlen+1]] : k in [1..m]];",
        "// counts of words by speciality & length for n := 1 to maxlen do i := 0; while i lt #langs[n+1] do i +:= 1; word := Floor(langs[n+1][i] / bas); // count alphabet l := (n eq 1) select 0 else Max([Floor(word / baspow[j]) mod bas : j in [0+1..n-1]]); // count speciality k of prefix k := Max(m-l-1,0); while i le #langs[n+1] and Floor(langs[n+1][i] / bas) eq word do i +:= 1; k +:= 1; end while; // count isomorphs special[k][n] +:= (l eq 0) select 1 else &*[m+1-j : j in [1..l]]; // total + m...(m-l+1) --- & fails if range empty! end while; end for; print m, n, special; // should sum to A180238"
    ],
    "xref": [
        "Cf. A005598, A180238, A180239, A180438, A180439."
    ],
    "keyword": "nonn",
    "offset": "0,4",
    "author": "_Fred Lunnon_, Sep 05 2010",
    "references": 2,
    "revision": 7,
    "time": "2014-06-18T20:48:36-04:00",
    "created": "2010-09-12T03:00:00-04:00"
}