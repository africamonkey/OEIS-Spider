{
    "number": 224935,
    "data": "19,171,271,1428,2178,3781,4053,9303,19459,37980,51238,52669,71316,97083,127014,147978,188074,411675,733591,1018171,1620010,1701078,1753416,2159496,2642781,4542678,5244753,7337736,10217611,12251265,16212831,17100132,35839545,43400544",
    "name": "Numbers n such that a positive number m <= n exists such that n-m, n+m, and n*m are triangular numbers.",
    "comment": [
        "Sequence of corresponding m's begins: 9, 105, 135, 525, 2100, 1890, 225, 3417, 14994, 23445, 15192, 26334, 19635, 40467, 1764, 142725, 171054, 382755, 366795, 998865, 8100, ...",
        "Conjectures:",
        "1. The sequence is infinite.",
        "2. There is only one m for each n  (this is true for n < 2^26)."
    ],
    "example": [
        "The following three are triangular numbers:",
        "271-135 = 136,",
        "271+135 = 406,",
        "271*135 = 36585.",
        "So 271 is in the sequence."
    ],
    "program": [
        "(Java)",
        "public class A224935 {",
        "  public static long sr0 = 1;",
        "  public static boolean[] isTriang = new boolean[5 << 25];",
        "  public static boolean isTriangular(long a) {",
        "    long b, s, sr = sr0;",
        "    while (a < sr*(sr+1)/2)  sr>>=1;",
        "    b = sr>>1;",
        "    while (b!=0) {",
        "        s = sr+b;",
        "        if (a >= s*(s+1)/2)  sr = s;",
        "        b>>=1;",
        "    }",
        "    if (a == sr*(sr+1)/2)  return true;",
        "    return false;",
        "  }",
        "  public static void main (String[] args) {",
        "      for (int i=0; i*(i+1) < 5 << 26; ++i) isTriang[i*(i+1)/2] = true;",
        "      for (long a = 0; a < 5 << 24; ++a) {",
        "        long s = 1L << 30, tn = 0, count = 0, lastTn = 0;",
        "        while (a*a < s*(s+1)/2)  s>>=1;",
        "        sr0 = s;",
        "        for (long i = 1; tn < a; ++i) {",
        "          long b = a - tn;",
        "          if (isTriang[(int)(a*2-tn)])",
        "            if (isTriangular(a*(a-tn)))  { ++count; lastTn = tn; }",
        "          tn += i;",
        "        }",
        "        if (count>0) System.out.printf(\"\\n%d %d  %d \", a, a-lastTn, count);",
        "        if ((a & 0x3fff)==0)  System.out.printf(\".\");",
        "      }",
        "  }",
        "}"
    ],
    "xref": [
        "Cf. A000217, A224954."
    ],
    "keyword": "nonn",
    "offset": "1,1",
    "author": "_Alex Ratushnyak_, Apr 20 2013",
    "references": 2,
    "revision": 16,
    "time": "2013-04-22T02:55:55-04:00",
    "created": "2013-04-20T19:11:56-04:00"
}