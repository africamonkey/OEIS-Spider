{
    "number": 216264,
    "data": "1,2,4,8,16,32,64,128,252,488,932,1756,3246,5916,10618,18800,32846,56704,96702,163184,272460,450586,738274,1199376,1932338,3089518,4903164,7728120,12099440,18825066,29112876,44767202,68461866,104153666,157657852,237510110,356158688",
    "name": "Number of rich binary words of length n.",
    "comment": [
        "A word of length n is \"rich\" if it contains, as subwords, exactly n + 1 distinct palindromes (including the empty word). Here \"subword\" means contiguous subsequence of the word."
    ],
    "reference": [
        "Chuan Guo, J Shallit, AM Shur, Palindromic Rich Words and Run-Length Encodings, nformation Processing Letters Volume 116, Issue 12, December 2016, Pages 735-738; https://doi.org/10.1016/j.ipl.2016.07.001."
    ],
    "link": [
        "Mikhail Rubinchik, <a href=\"/A216264/b216264.txt\">Table of n, a(n) for n = 0..60</a>",
        "Amy Glen, Jacques Justin, Steve Widmer and Luca Q. Zamboni, <a href=\"http://dx.doi.org/10.1016/j.ejc.2008.04.006\">Palindromic richness</a>, European J. Combin. 30 (2009), no. 2, 510-531.",
        "Chuan Guo, J. Shallit, A. M. Shur, <a href=\"http://arxiv.org/abs/1503.09112\">On the Combinatorics of Palindromes and Antipalindromes</a>, arXiv preprint arXiv:1503.09112 [cs.FL], 2015.",
        "M. Rubinchik, A. M. Shur, <a href=\"http://arxiv.org/abs/1506.04862\">Eertree: An Efficient Data Structure for Processing Palindromes in Strings</a>, arXiv preprint arXiv:1506.04862 [cs.DS], 2015.",
        "Mikhail Rubinchik, <a href=\"http://pastebin.com/7KhcrE69\">C program</a>.",
        "Josef Rukavicka, <a href=\"https://arxiv.org/abs/1701.07778\">On Number of Rich Words</a>, arXiv:1701.07778 [math.CO], 2016."
    ],
    "example": [
        "For n = 8 we have a(n) = 2^8 - 4 = 252 because the only non-rich words are 00101100, 00110100, and their complements."
    ],
    "program": [
        "(PARI) ispal(v) = {for (i=1, #v\\2, if (v[i] != v[#v-i+1], return(0)); ); return(1); };",
        "isrich(vb, n) = {pals = Set(); for (i=1, #vb, for (len=1, #vb-i+1, subword = vector(len, x, vb[i+x-1]); if (ispal(subword), pals = setunion(pals, Set(Str(subword)) ); ); ); ); if (length(pals)==n, return(1)); return (0); }",
        "a(n) = {nbr = 0; for (i=0, 2^n-1, vb = binary(i); while(length(vb) < n, vb = concat(0, vb); ); if (isrich(vb, n), nbr++); ); return (nbr); } \\\\ _Michel Marcus_, May 26 2013"
    ],
    "xref": [
        "Cf. A225681."
    ],
    "keyword": "nonn,more",
    "offset": "0,2",
    "author": "_Jeffrey Shallit_, Mar 15 2013",
    "ext": [
        "a(17) from _Alois P. Heinz_, Mar 15 2013",
        "More terms from _Jeffrey Shallit_, Mar 19 2013",
        "a(26)-a(60) from _Mikhail Rubinchik_, Mar 05 2015"
    ],
    "references": 2,
    "revision": 53,
    "time": "2017-07-17T22:38:15-04:00",
    "created": "2013-03-15T20:31:10-04:00"
}