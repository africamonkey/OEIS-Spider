{
    "number": 268689,
    "data": "0,0,0,0,4,14,94,510",
    "name": "Let f(n) = maximal value of the weak Goodstein function g_k(n) for k >= 0; then a(n) = minimal value of k such that g_k(n) = f(n).",
    "comment": [
        "g_k(n) is the weak Goodstein function defined in A266202."
    ],
    "example": [
        "g_1(4) = b_2(4)-1 = b_2(2^2)-1 = 3^2-1 = 8;",
        "g_2(4) = b_3(2*3+2)-1 = 2*4 + 2-1 = 9;",
        "g_3(4) = b_4(2*4 + 1 ) -1 = 2*5 + 1-1 = 10;",
        "g_4(4) = b_5(2*5) -1= 2*6 - 1 = 11;",
        "g_5(4) = b_6(6+5)-1 = 7+5-1 = 11;",
        "g_6(4) = b_7(7+4)-1 = 8+4-1 = 11;",
        "g_7(4) = b_8(8+3)-1 = 9+3-1 = 11;",
        "g_8(4) = b_9(9+2)-1 = 10+2-1 = 11;",
        "g_9(4) = b_10(10+1)-1 = 11+1-1 = 11;",
        "g_10(4) = b_11(11)-1 = 12-1 = 11;",
        "g_11(4) = b_12(11)-1 = 11-1 = 10;",
        "g_12(4) = b_13(10)-1 = 10-1 = 9;",
        "g_13(4) = b_14(9)-1 = 9-1 = 8;",
        "\u2026",
        "g_21(4) = 0;",
        "So a(4) = 4."
    ],
    "program": [
        "(PARI) g(n, k) = {if (n == 0, return (k)); wn = k; for (k=2, n+1, pd = Pol(digits(wn, k)); wn = subst(pd, x, k+1) - 1; ); wn; }",
        "a(n) = {vg = []; ok = 1; ns = 0; while(ok, newg = g(ns, n); vg = concat(vg, newg); if (newg <= 0, ok = 0); ns++;); vmax = vecmax(vg); k = 1; while (vg[k] != vmax, k++); k--;} \\\\ _Michel Marcus_, Apr 03 2016"
    ],
    "xref": [
        "Cf. A266203, A268687, A268688."
    ],
    "keyword": "nonn,hard",
    "offset": "0,5",
    "author": "_Natan Arie' Consigli_, Apr 03 2016",
    "ext": [
        "a(7) from _Michel Marcus_, Apr 03 2016"
    ],
    "references": 2,
    "revision": 15,
    "time": "2016-04-04T00:08:11-04:00",
    "created": "2016-04-04T00:08:11-04:00"
}