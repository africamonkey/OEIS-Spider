{
    "number": 166084,
    "data": "8,75,84,90,105,108,120,126,135,140,144,147,160,168,180,192,196,210,216,224,240,245,252,256,270,280,288,300,315,320,336,350,360,378,384,400,405,420,432,440,450,462,480,486,495,500,504,528,540,560,567,576,594",
    "name": "Maximal volume of a closed box created by using at most n voxels as the boundary, skipping values of n for which the volume is the same as for n-1 and also skipping values of n for which volume(n)-n <= volume(n-1)-(n-1). In other words, the empty enclosed space must increase.",
    "comment": [
        "For example, a 3 X 3 X 3 box can be created by using top and bottom plates of 3 X 3 X 1 voxels, and using 8 voxels to connect them, totaling 26 voxels."
    ],
    "link": [
        "Li-yao Xia, <a href=\"/A166084/a166084.txt\">Examples of (N, Volume(N)), N<1000</a>"
    ],
    "formula": [
        "For each N (starting at 8), calculate the max Volume(N)=w*h*d such that (N <= (w*h*d - (w-1)*(h-1)*(d-1)). Keep only those N for which Volume(N)>Volume(N-1) and Volume(N)-N > Volume(N-1)-(N-1). The minimum box is 2 X 2 X 2 voxels to prevent overlapping voxels (multiple voxels occupying the same location in space) or degenerate cases."
    ],
    "example": [
        "N Volume",
        "8 8",
        "26 27",
        "34 36",
        "42 45",
        "44 48",
        "54 60",
        "56 64",
        "66 75",
        "68 80",
        "80 96"
    ],
    "program": [
        "(Java)",
        "int lastMax = 0;",
        "int lastGain = -1;",
        "for (int voxels = 8; voxels <= 1000; voxels++)",
        "{",
        "  int max = 0;",
        "  for (int depth = voxels / 4; depth >= 2; depth--)",
        "  {",
        "    for (int width = voxels / (2 * depth); width >= 2; width--)",
        "    {",
        "      int remaining = voxels - 2 * width * depth;",
        "      int height = 2 + remaining / (2 * (width - 1 + depth - 1));",
        "      int volume = width * depth * height;",
        "      if (max < volume)",
        "      {",
        "        max = volume;",
        "      }",
        "    }",
        "  }",
        "  if (lastMax < max)",
        "  {",
        "    lastMax = max;",
        "    int gain = max - voxels;",
        "    if (lastGain < gain)",
        "    {",
        "      lastGain = gain;",
        "      System.out.println(\"%e A166084 \" + voxels + \" \" + max);",
        "    }",
        "  }",
        "}"
    ],
    "xref": [
        "Cf. A166082 (full sequence without conditions), A166083 (sequence with only the Volume(N)>Volume(N-1) condition)."
    ],
    "keyword": "nonn",
    "offset": "1,1",
    "author": "Mark Jeronimus (mark.jeronimus(AT)gmail.com), Oct 06 2009, Dec 01 2009",
    "ext": [
        "Minor edits by _N. J. A. Sloane_, Dec 05 2009",
        "Long example moved to a file and code indented by _Li-yao Xia_, Nov 02 2014"
    ],
    "references": 3,
    "revision": 15,
    "time": "2014-11-20T06:07:35-05:00",
    "created": "2010-06-01T03:00:00-04:00"
}