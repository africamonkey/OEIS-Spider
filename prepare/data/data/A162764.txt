{
    "number": 162764,
    "data": "0,2,4,6,8,10,12,14,16,22,26,32,36,40,44",
    "name": "Consider an n-story building (with floors numbered sequentially from 1 to n) having an elevator whose maximum capacity is C persons. Suppose n people (one at each floor) are waiting at floors 1, 2, ..., n-1, n, and that their destinations are floors n, n-1, ..., 2, 1, respectively. When C = 4 and the elevator starts at floor 1, what is the minimal total number of floors that the elevator must move to get everyone to his or her destination?",
    "comment": [
        "From _Jon E. Schoenfield_, Dec 21 2003: (Start)",
        "For n > 1, let k = int((n-2)/(2*C)); the following simple algorithm for transporting persons to floors demonstrates an upper bound of a(n) <= 2*(k+1)*(n-1-C*k):",
        "1. If n is odd, then disregard the person on the ((n+1)/2)-th floor (since that person's current floor and destination floor are the same).",
        "2. Move the elevator in a series of 2*k+1 passes in alternating directions; on the p-th pass, move the elevator by (-1)^(p+1)*(n-1-(p-1)*C) floors (i.e., move up by n-1 floors on the 1st pass, down by n-1-C floors on the 2nd pass, up by n-1-2*C floors on the 3rd pass, down by n-1-3*C floors on the 4th pass, etc.). (As a result, the p-th pass will end at the floor numbered (n+1)/2+C/4+(-1)^(p+1)*((n-1)/2+C/4-p*C/2).)  At each of the first C floors of each pass (or until there are no more persons to be moved in that direction), load the person who is waiting to be taken to a floor in the direction in which the elevator will be moving during the current pass. Unload each passenger when his or her destination floor is reached. Before beginning each subsequent upward pass, unload all remaining passengers at the current floor.",
        "3. Make a final downward pass to Floor 1, loading each waiting person when the floor at which he or she is waiting is reached, and unloading each passenger at his or her destination floor.",
        "For example, at C=4 and n=10, first (going up 9 floors), load persons waiting at Floors 1 through 4 and unload each at his or her destination floor until Floor 10 is reached. Next (going down 5 floors), load persons waiting at Floors 10 through 7 and (temporarily) unload them at Floor 5. Then (going up 1 floor), load the remaining person at Floor 5, and unload him or her at Floor 6. Then, on the final downward pass (going down 5 floors), load the person waiting at Floor 6, unload him or her at Floor 5, reload the four remaining persons waiting there, and unload them at Floors 4 through 1. Total number of floors moved: 9+5+1+5=20. In this example, k = int((n-2)/(2*C)) = 1, and 2*(k+1)*(n-1-C*k) = 20.",
        "The upper bound a(n) <= 2*(k+1)*(n-1-C*k) shows that either the sequence's existing definition is incorrect or all terms listed beyond a(9) are incorrect. (End)",
        "Consider an additional constraint (perhaps considered by the sequence's author to be implied, but not stated): \"No passenger can be unloaded from the elevator at any floor other than his or her final destination floor.\" Would all the existing terms (through a(15)=44) be correct if this constraint were added to the problem? The same question applies to the existing terms of A162761, A162762, and A162763. - _Jon E. Schoenfield_, Dec 28 2013"
    ],
    "example": [
        "a(2)=2 because at n=2 the elevator needs to move a total of only 2 floors to transport everyone to his or her destination: the elevator loads the person at floor 1, moves to floor 2 (a move of 1 floor), unloads, loads the person at floor 2, moves to floor 1 (another move of 1 floor), and unloads."
    ],
    "xref": [
        "For the same problem but with an elevator capacity C of 1, 2, or 3 persons, see A162761, A162762, and A162763, respectively."
    ],
    "keyword": "nonn,more",
    "offset": "1,2",
    "author": "Do Zerg (daidodo(AT)gmail.com), Jul 13 2009",
    "ext": [
        "Edited by _Jon E. Schoenfield_, Dec 02 2013"
    ],
    "references": 0,
    "revision": 25,
    "time": "2016-11-07T08:37:14-05:00",
    "created": "2010-06-01T03:00:00-04:00"
}