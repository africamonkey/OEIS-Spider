{
    "number": 226152,
    "data": "3,9,12,21,24,35,72,126,129,179,189,194,198,214,243,253,255,279,304,322,432,443,480,487,511,523,663,681,696,699,711,717,721,734,738,796,802,838,910,975,1008,1034,1070,1144,1215,1230,1237,1265,1276,1370,1375,1386,1469",
    "name": "Numbers n such that n^2 is an average of 4 consecutive primes.",
    "comment": [
        "Integers of the form sqrt(A102655(k)) for any k. - _R. J. Mathar_, Jun 06 2013"
    ],
    "formula": [
        "a(n) = A051395(n)/2."
    ],
    "maple": [
        "A034963 := proc(n)",
        "    add(ithprime(i), i=n..n+3) ;",
        "end proc:",
        "for n from 1 to 90000 do",
        "    s := A034963(n)/4 ;",
        "    if type(s,'integer') then",
        "    if issqr(s) then",
        "        printf(\"%d, \", sqrt(s)) ;",
        "    end if;",
        "    end if;",
        "end do: # _R. J. Mathar_, Jun 06 2013"
    ],
    "program": [
        "(C)",
        "#include <stdio.h>",
        "#include <stdlib.h>",
        "#include <math.h>",
        "#define TOP (1ULL<<30)",
        "int main() {",
        "  unsigned long long i, j, p1, p2, p3, r, s;",
        "  unsigned char *c = (unsigned char *)malloc(TOP/8);",
        "  memset(c, 0, TOP/8);",
        "  for (i=3; i < TOP; i+=2)",
        "    if ((c[i>>4] & (1<<((i>>1) & 7)))==0 /*&& i<(1ULL<<32)*/)",
        "        for (j=i*i>>1; j<TOP; j+=i)  c[j>>3] |= 1 << (j&7);",
        "  for (p3=2, p2=3, p1=5, i=7; i < TOP; i+=2)",
        "    if ((c[i>>4] & (1<<((i>>1) & 7)))==0) {",
        "      s = p3 + p2 + p1 + i;",
        "      if (s%4==0) {",
        "        s/=4;",
        "        r = sqrt(s);",
        "        if (r*r==s) printf(\"%llu, \", r);",
        "      }",
        "      p3 = p2, p2 = p1, p1 = i;",
        "    }",
        "  return 0;",
        "}"
    ],
    "xref": [
        "Cf. A102655, A051395, A206280."
    ],
    "keyword": "nonn",
    "offset": "1,1",
    "author": "_Alex Ratushnyak_, May 28 2013",
    "references": 0,
    "revision": 9,
    "time": "2013-06-06T08:09:53-04:00",
    "created": "2013-06-06T08:09:53-04:00"
}