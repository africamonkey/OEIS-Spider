{
    "number": 232668,
    "data": "26,34,38,39,46,51,52,57,58,62,65,68,69,74,76,78,82,85,86,87,91,92,93,94,95,102,104,106,114,115,116,117,118,119,122,123,124,129,130,133,134,136,138,142,143,145,146,148,152,153,155,156,158,159,164",
    "name": "Natural numbers that are not (primes, 11-smooth, perfect powers or base-10 palindromes).",
    "comment": [
        "The intention was to generate a sequence of uninteresting numbers. - _John R Phelan_, Dec 01 2014"
    ],
    "link": [
        "Wikipedia, <a href=\"https://en.wikipedia.org/wiki/Complement_(set_theory)\">Complement (set theory)</a>",
        "Wikipedia, <a href=\"https://en.wikipedia.org/wiki/Interesting number paradox\">Interesting number paradox</a>"
    ],
    "formula": [
        "A000027 \\ A000040 \\ A051038 \\ A002113 \\ A001597.",
        "A \\ B represents set \"subtraction\", all the elements in A that are not in B.",
        "In other words, start with the Natural numbers (A000027).",
        "Remove the prime numbers (A000040).",
        "Remove the 11-smooth numbers, numbers whose prime divisors are all <= 11 (A051038).",
        "Remove the base-10 palindromes (A002113).",
        "Remove the perfect powers, m^k where m > 0 and k >= 2 (A001597).",
        "And what's left is this sequence.",
        "a(n) ~ n; in particular, a(n) = n + n/log n + o(n/log n). - _Charles R Greathouse IV_, Nov 27 2013"
    ],
    "example": [
        "16 is not in the sequence since it's a perfect power, 2^4.",
        "19 is not in the sequence since it's prime.",
        "18 is not in the sequence since it's 2*3*3, so it's 11-smooth.",
        "22 is not in the sequence since it's a base 10 palindrome.",
        "26 is in the sequence since it's 2*13, so it's not prime, not 11-smooth, not a base-10 palindrome, and not a perfect power."
    ],
    "program": [
        "(Java) public class Nnn {public static void main(String[] args) {String str = \"\"; for (int i = 0; i < 1000000 && str.length() < 250; i++) {if (isPrime(i) || isSmooth(11,i) || isPerfectPower(i) || isPalindrome(i)) {} else {str += i + \", \";}} System.out.println(str);} static boolean isPalindrome(int i) {return ((i+\"\").equals(new StringBuilder(i+\"\").reverse().toString()));} static boolean isSmooth(int s, int n) {if (n<2) return true; for (int i=2;i<=s;i++) {while (n%i==0) n=n/i;} return n==1;} static boolean isPerfectPower(int n) {for (int i=2;i<=Math.sqrt(n);i++) {int j=i*i; while (j<n) j*=i; if (j==n) return true;} return false;} static boolean isPrime(int n) {if (n<2) return false; for (int i=2;i<=Math.sqrt(n);i++) {if (n%i==0) return false;} return true;}}"
    ],
    "xref": [
        "This sequence is A000027 \\ A000040 \\ A051038 \\ A002113 \\ A001597."
    ],
    "keyword": "base,easy,nonn",
    "offset": "1,1",
    "author": "_John R Phelan_, Nov 27 2013",
    "references": 0,
    "revision": 17,
    "time": "2014-12-01T21:34:56-05:00",
    "created": "2013-11-27T16:57:45-05:00"
}