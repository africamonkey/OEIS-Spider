{
    "number": 160675,
    "data": "1,1,1,1,1,1,1,1,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,5",
    "name": "Duplication root: the maximal number of distinct squarefree words that a word of length n can be reduced to by iterated application of string-rewriting rules uu->u.",
    "comment": [
        "The growth is bounded by 1/30*110^(n/42) <= DupRoots(n) <= 2^n.",
        "Duplication on strings was originally motivated by the fact that it occurs in DNA strands."
    ],
    "reference": [
        "J. Dassow, V. Mitrana, and G. P\u0103un, On the regularity of duplication closure. Bulletin of the EATCS, 69 1999, pp. 133-136.",
        "P. Leupold: Duplication roots, in Developments in Language Theory, T. Harju, J. Karhumski and A. Lepisto, eds., vol. 4588 of Lecture Notes in Computer Science, Springer, 2007, pp. 290-299.",
        "P. Leupold: Reducing Repetitions, Manuscript, 2009."
    ],
    "link": [
        "P, Leupold, <a href=\"http://www.wortspieler.org/Dateien/Pubs/09DupAlgo.pdf\">Manuscript</a> containing the definition and the bounds"
    ],
    "example": [
        "The shortest word with ambiguous root (up to reversal and renaming of letter) is",
        ".abcbabcbc",
        "which can be reduced to the words",
        ".abc, abcbc, abcbabc, abcbabcbc",
        "and of these only",
        ".abc, abcbabc",
        "are squarefree.",
        "Witnesses for the value changes from 2 to 4 and from 4 to 5 are",
        ".DUPROOT(abcbabcbcacbca) = (abcbabcacbca, abcbabca, abcacbca, abca).",
        ".DUPROOT(ababcbabcacbabcabacbabcab) = (abcbabcabacbabcab, abcbabcab, abcacbabcab, abcabacbabcab, abcab).",
        "Words with three roots exist, however, the first one is longer than the first one with four roots:",
        ".DUPROOT(babacabacbcabacb) = (bacabacb, bacbcabacb, bacb)."
    ],
    "keyword": "hard,more,nonn",
    "offset": "1,9",
    "author": "Peter Leupold (leupold(AT)cc.kyoto-su.ac.jp), May 23 2009",
    "references": 0,
    "revision": 4,
    "time": "2014-06-12T14:08:11-04:00",
    "created": "2010-06-01T03:00:00-04:00"
}