{
    "number": 176112,
    "data": "3,5,41,43,53,61,109,139,149,163,167,173,179,227,233,269,307,317,373,401,439,443,479,541,557,563,607,617,619,661,751,787,827,863,911,937,1069,1087,1093,1097,1193,1259,1297,1303,1321,1373,1381,1409,1439",
    "name": "This sequence contains primes that, under the Collatz function, take a prime number of steps to reach one.",
    "comment": [
        "Primes p such that A006577(p) is prime. - _Charles R Greathouse IV_, May 12 2015"
    ],
    "link": [
        "Charles R Greathouse IV, <a href=\"/A176112/b176112.txt\">Table of n, a(n) for n = 1..10000</a>"
    ],
    "mathematica": [
        "pnsQ[n_]:=PrimeQ[Length[NestWhileList[If[EvenQ[#],#/2,3#+1]&,n,#>1&]]- 1];  Select[Prime[Range[500]],pnsQ] (* _Harvey P. Dale_, Nov 28 2016 *)"
    ],
    "program": [
        "(Python)",
        "###################################################################",
        "# Kent E. Hays 04.05.2010",
        "# Function: Collatz",
        "# This function takes a positive integer, and returns the number",
        "# of steps necessary for the Collatz function to reduce the",
        "# integer to one.",
        ". def Collatz(number):",
        "....X = number",
        "....Steps = 0",
        "....while X != 1:",
        "........if X%2==0 and X != 1:",
        "............Steps += 1",
        "............X = X/2",
        "........if X%2 != 0 and X != 1:",
        "............Steps += 1",
        "............X = 3*X + 1",
        ".....return Steps",
        ".",
        "###################################################################",
        "# Kent E. Hays 12.24.2009",
        "# Function: primer",
        "# This function takes a positive integer n, and returns a list of",
        "# primes, whose length is equal to n, starting with the smallest",
        "# prime and increasing in size.",
        ". def primer(n):",
        "....if n==1:",
        "........return [2]",
        "....elif n==2:",
        "........return [2,3]",
        "....elif n<2:",
        "........return []",
        "....p = [2,3]",
        "....x = 0",
        "....i = 3",
        "....while len(p) < n+1:",
        "........if x < len(p):",
        "............if i%p[x] != 0:",
        "................x += 1",
        "............if p[x]> i**0.5:",
        "................p.append(i)",
        "................x = 0",
        "................i += 2",
        "............if i%p[x] == 0:",
        "................i += 2",
        "................x = 0",
        "....return [2]+p[2:]",
        "##################################################################",
        "# Kent E. Hays 04.08.2010",
        "# The rest of the operations that I needed",
        "# To be honest, I was tired when I wrote this bit. I'm pretty sure there is an extra dictionary in here. This bit of code takes the two functions above, and uses them to examine whether or not the",
        "# primes in the PrimeList take a prime number of steps to reduce to",
        "# one using the Collatz function defined above, and then puts all",
        "# these \"Collatz primes\" into a list called ColLineList. Change the",
        "# integer in \"primeList = primer(n)\" to give a pool of prime values",
        "# to check.",
        ". ColDict = {}",
        ". ColPrime = {}",
        ". ColPriList = []",
        ". ColLineList = []",
        ".  PrimeList = primer(n)",
        ". for number in PrimeList:",
        "....Var = Collatz(number)",
        "....if Var not in ColDict:",
        "........ColDict[Var] = [number]",
        "....elif Var in ColDict:",
        "........ColDict[Var].append(number)",
        ". for key in ColDict:",
        "....if key in PrimeList:",
        "........ColPriList = ColPriList + ColDict[key] . ColPriList.sort()",
        "(PARI) A006577(n)=my(s);while(n>1,n=if(n%2,3*n+1,n/2);s++);s",
        "select(p->isprime(A006577(p)), primes(100)) \\\\ _Charles R Greathouse IV_, May 12 2015"
    ],
    "xref": [
        "Cf. A006577."
    ],
    "keyword": "nonn",
    "offset": "1,1",
    "author": "Kent Edward Hays (hayske(AT)gmail.com), Apr 08 2010",
    "references": 1,
    "revision": 9,
    "time": "2016-11-28T17:01:26-05:00",
    "created": "2010-06-01T03:00:00-04:00"
}