{
    "number": 160511,
    "data": "1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,13,13,14,14,15,16,16,17,18,18,19",
    "name": "Number of weighings needed to find lighter coins among n coins.",
    "comment": [
        "a(n) is the minimal worst-case number of weighings needed by an algorithm to sort a set of n coins of two possible weights into heavy vs. light coins by using a balance; additional known good (heavy, say) coins are available (esp. to distinguish \"all heavy\" from \"all light\").",
        "It is known that ceiling(n*log_3(2) + log_3(135/128)) <= a(n) <= ceiling(7n/11) for all n except for n=3. This implies 19 <= a(30) <= 20 and in fact a(n) = ceil(7n/11) for several n <= 187, esp. for all n with n<=50 except n=3, n=30, n=41, n=49."
    ],
    "link": [
        "An-Ping Li, <a href=\"http://arxiv.org/abs/0902.0841\">A note on the counterfeit coins problem</a>, arXiv:0902.0841v8 [math.CO]"
    ],
    "example": [
        "For n=1, compare the given coin A with a known heavy coin X. If A<X, then A is a light coin; if A=X, then A is a heavy coin; the outcome A>X is not possible. Since one weighing was needed, we have a(1)=1.",
        "For n=3, to sort coins A,B,C, one optimal algorithm is: First compare A:B. If A<B, we know that A is light and B is heavy and can find out about C by comparing e.g. B:C in a second weighing. The case A>B is symmetric. If however A=B, compare A:C. If A<C, we know that A,B are light and C is heavy and vice versa for A>C. The worst case is A=C, which requires a third weighing, e.g. A:X, against a known heavy coin X. Since no algorithm exists that never uses more than 2 weighings, we have a(3) = 3."
    ],
    "xref": [
        "Cf. A156301. [From _Jonathan Vos Post_, May 18 2009]"
    ],
    "keyword": "hard,more,nonn",
    "offset": "1,2",
    "author": "_Hagen von Eitzen_, May 16 2009",
    "references": 0,
    "revision": 6,
    "time": "2013-08-24T12:12:46-04:00",
    "created": "2010-06-01T03:00:00-04:00"
}