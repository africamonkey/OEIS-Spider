{
    "number": 128866,
    "data": "5,405,12005,253125,4617605,78764805,1300723205,21141253125,340920883205,5476114739205,87789257318405,1406000997253125,22507005033676805,360200017312153605,5763903867804057605",
    "name": "Number of n-tuples where each entry is chosen from the subsets of {1,2,3,4,5} such that the intersection of all n entries contains exactly one element.",
    "comment": [
        "There is the following general formula: The number T(n,k,r) of n-tuples where each entry is chosen from the subsets of {1,2,..,k} such that the intersection of all n entries contains exactly r elements is: T(n,k,r) = C(k,r) * (2^n - 1)^(k-r). This may be shown by exhibiting a bijection to a set whose cardinality is obviously C(k,r) * (2^n - 1)^(k-r), namely the set of all k-tuples where each entry is chosen from subsets of {1,..,n} in the following way: Exactly r entries must be {1,..,n} itself (there are C(k,r) ways to choose them) and the remaining (k-r) entries must be chosen from the 2^n-1 proper subsets of {1,..,n}, i.e. for each of the (k-r) entries, {1,..,n} is forbidden (there are, independent of the choice of the full entries, (2^n - 1)^(k-r) possibilities to do that, hence the formula). The bijection into this set is given by (X_1,..,X_n) |-> (Y_1,..,Y_k) where for each j in {1,..,k} and each i in {1,..,n}, i is in Y_j if and only if j is in X_i."
    ],
    "link": [
        "<a href=\"/index/Rec\">Index entries for linear recurrences with constant coefficients</a>, signature (31,-310,1240,-1984,1024)."
    ],
    "formula": [
        "a(n)=5 * (2^n-1)^4",
        "G.f.: -5*x*(4*x+1)*(16*x^2+46*x+1)/((x-1)*(2*x-1)*(4*x-1)*(8*x-1)*(16*x-1)). [_Colin Barker_, Nov 17 2012]"
    ],
    "example": [
        "a(1)=5 because the five tuples of length one are ({1}),({2}),({3}),({4}),({5})."
    ],
    "program": [
        "In Java: import java.io.*; import java.math.*; public class MakeSequence { public static void main(String[] args) { String s = new String(); BigInteger x; BigInteger one = new BigInteger(\"1\"); BigInteger five = new BigInteger(\"5\"); String help; try { BufferedWriter out = new BufferedWriter(new FileWriter(\"sequence.txt\")); for (Integer k=1; k<31; ++k) { x = (((two.pow(k)).subtract(one)).pow(4)).multiply(five); help = x.toString(); s = help + \", \"; out.write(s); } out.close(); } catch (IOException e) { } } }"
    ],
    "keyword": "nonn,easy",
    "offset": "1,1",
    "author": "Peter C. Heinig (heinig(AT)in.tum.de), Apr 17 2007",
    "references": 0,
    "revision": 7,
    "time": "2015-06-13T00:52:20-04:00",
    "created": "2007-05-11T03:00:00-04:00"
}