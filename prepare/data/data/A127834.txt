{
    "number": 127834,
    "data": "23,29,46,58,71,92,113,116,139,142,163,184,197,209,226,232",
    "name": "Numbers whose 8-bit binary representation, when rotated by up to one bit, contains every 3-bit binary representation for the numbers 0 through 7. When this binary representation, with two bits from one end concatenated to the other, is given as input to an elementary cellular automaton, the first line of output will uniquely identify the rule of the automaton.",
    "comment": [
        "The binary representations of these numbers are equivalent under rotation / complement."
    ],
    "link": [
        "Eric Weisstein's World of Mathematics, <a href=\"http://mathworld.wolfram.com/ElementaryCellularAutomaton.html\">Elementary Cellular Automaton</a>, MathWorld"
    ],
    "example": [
        "23 has the 8-bit representation 00010111.",
        "Concatenate the last two digits onto the beginning to get 1100010111.",
        "We read off the 3-bit substrings:",
        "110",
        "100",
        "000",
        "001",
        "010",
        "101",
        "011",
        "111"
    ],
    "program": [
        "(Sage)",
        "i = 0 while i < 256: bin = i.binary() bin = bin[ -2:] + \"0\"*(8-len(bin)) + bin subs = [] for j in range(8): k = bin[j:j+3] if k not in subs: subs.append(k) else: break if len(subs) == 8: print i i += 1"
    ],
    "keyword": "fini,full,nonn",
    "offset": "1,1",
    "author": "_Tomas Boothby_, Feb 01 2007",
    "references": 0,
    "revision": 6,
    "time": "2013-10-13T03:14:12-04:00",
    "created": "2007-05-11T03:00:00-04:00"
}