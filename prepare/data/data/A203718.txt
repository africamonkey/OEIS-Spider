{
    "number": 203718,
    "data": "1,110,110100,110100111,1101001111000,11010011110001011,1101001111000101110000,110100111100010111000010010,11010011110001011100001001010101,1101001111000101110000100101010110110,110100111100010111000010010101011011011001",
    "name": "Binary sequence where each successive term is made by appending to the previous term the next smallest positive binary integer that is not already contained within it.",
    "comment": [
        "Each successive term is built from the last by appending to it the next smallest positive binary integer that is not already contained within the previous term as a sequential subset. E.g., a(2) = 110. The smallest positive binary integer not contained within this term is 100, since 1, 10 and 11 can all be found in parts of it. Therefore a(3) is the concatenation of a(2) and '100'; a(3) = 110100.",
        "Note that every power of 2 will always be included, as there is never a prior instance of exactly that many zeros occurring sequentially. This sequence can be generalized to other number bases, but higher bases take more terms to begin exhibiting interesting (nontrivial) behavior. Can also be begun with a 'seed' number. Properties of this sequence using seed values are yet to be examined. Open questions: frequency at which new integers are appended, frequency of each digit within successive terms, rate of growth of terms."
    ],
    "program": [
        "(Python)",
        "def A203718(n, seed = '1'):",
        "....\"\"\"",
        "....Returns the n-th term of the sequence.",
        "....Optionally specified seed.",
        "....\"\"\"",
        "....i = 0",
        "....term = seed",
        "....next_int = 1",
        "....while i < n:",
        "........b = bin(next_int)[2:]",
        "........if b not in term:",
        "............term += b",
        "............i += 1",
        "........next_int += 1",
        "....return term",
        ".",
        "def A203718_list(stop, start = 0, seed = '1'):",
        "....\"\"\"",
        "....Returns a slice of the sequence up to the specified index.",
        "....Seed and starting index optional",
        "....\"\"\"",
        "....terms = [seed]",
        "....term = seed",
        "....i = 0",
        "....next_int = 1",
        "....while i < stop:",
        "........b = bin(next_int)[2:]",
        "........if b not in term:",
        "............term += b",
        "............if start <= i:",
        "................terms.append(term)",
        "............i += 1",
        "........next_int += 1",
        "....return terms"
    ],
    "keyword": "nonn,base",
    "offset": "1,2",
    "author": "_Michael Cromer_, Jan 05 2012",
    "references": 1,
    "revision": 29,
    "time": "2014-12-10T01:59:48-05:00",
    "created": "2012-01-12T11:11:04-05:00"
}